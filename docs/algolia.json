[{"content":"本ドキュメントの目的 ","date":1649808000,"description":"Text about this post","lastmod":"2022-04-13T00:00:00Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://y37u51k.github.io/","publishdate":"2022-04-13T00:00:00Z","title":"Home title"},{"content":"NodeJSの導入 参考サイト：\nhttps://selegee.com/535/\nhttps://tecadmin.net/install-latest-nodejs-amazon-linux/\n公式ページにてv14が指定されているので、14.xを指定して下記コマンドでインストール実行する\n$ curl --silent --location https://rpm.nodesource.com/setup_14.x | sudo bash - $ sudo yum -y install nodejs 下記コマンドで確認を行う\n$ npm -v 6.14.16 $ node -v v14.19.1 AWS CDK CLIのインストール 参考サイト：\nhttps://aws.amazon.com/jp/getting-started/guides/setup-cdk/module-one/\n公式ページにてv 1.89.0が指定されているので、下記コマンドでバージョンを指定してインストール実行する\n$ npm install -g aws-cdk@1.89.0 下記コマンドで確認を行う\n$ cdk --version 1.89.0 (build df7253c) 必要パッケージのインストール 公式サイトに掲載されているpackage.jsonを利用して必要パッケージを一括インストールする\n$ npm install /node_modules 配下に必要パッケージがインストールされていることを確認する\n","date":1649808000,"description":"","lastmod":"2022-04-13T00:00:00Z","objectID":"d219718dca70ffb2bfe2b6bfe245189c","permalink":"https://y37u51k.github.io/aws-saga-tutorial/1_preparations/","publishdate":"2022-04-13T00:00:00Z","title":"1.事前準備"},{"content":"コードの修正 コンパイルを実行する前に適宜コード修正を行う\nsagaLambda.ts内のStep Functionsデプロイリージョンを環境に合わせて修正すること\nconst stepFunctions = new AWS.StepFunctions({ region: \u0026amp;#39;ap-northeast-1\u0026amp;#39; }); TypeScriptコードのコンパイル 下記コマンドを/bin上で実行し、TypeScriptで書かれたCDKスクリプト(cdk-serverless-saga.ts)をJSにコンパイルする\n$ npm run build JSファイル及び型定義ファイル (.d.ts) が生成されていることを確認する\nCDK 必要スタックの構築 下記コマンドで、CDKで定義したAWSリソースをデプロイするための環境を構築する\ncdk bootstrap aws://aws://\u0026amp;lt;アカウントID\u0026amp;gt;/\u0026amp;lt;リージョン名\u0026amp;gt; --profile default cdk bootstrap aws://626394096352/ap-northeast-1 --profile default CDKToolkitと呼ばれるCloudFormationStackが作成される\nリージョン内にCDKを利用するためのロール、ECR、S3バケットcdktoolkit-stagingbucket-[random]が作成される\n次に下記コマンドで、CDKで定義したAWSリソースをデプロイする\n$ cdk ls CdkServerlessSagaStack $ cdk deploy \u0026amp;lt;スタック名\u0026amp;gt; --profile default $ cdk deploy CdkServerlessSagaStack --profile default 上記のスタック名でCloudFormationStackが作成される\nデプロイの完了後にコンソール上に出力される API Gateway URLを取得する\n備考 デプロイされた単一または複数スタックを削除する際は下記のコマンドを使用する\n$ cdk destroy \u0026amp;lt;スタック名\u0026amp;gt; --profile default $ cdk destroy CdkServerlessSagaStack --profile default ","date":1650240000,"description":"","lastmod":"2022-04-18T00:00:00Z","objectID":"6a7c5df3e8ebd4e48870dfd74913372f","permalink":"https://y37u51k.github.io/aws-saga-tutorial/2_deployment/","publishdate":"2022-04-18T00:00:00Z","title":"2.環境構築"},{"content":"構築フローのテスト deploymentセクションで取得したURLをトリガーにステートマシーンのフローを起動する\nsagaLambda.tsではAPI Gateway URLのクエリパラメータから入力を受け取り、inputのJSONオブジェクトを生成し、Step Functionsを起動する\nmodule.exports.handler = (event:any, context:any, callback:any) =\u0026amp;gt; { let runType = \u0026amp;#34;success\u0026amp;#34;; // failFlightsReservation , failFlightsConfirmation , failCarRentalReservation, failCarRentalConfirmation, failPayment let tripID = context.awsRequestId; if(null != event.queryStringParameters){ if(typeof event.queryStringParameters.runType != \u0026amp;#39;undefined\u0026amp;#39;) { runType = event.queryStringParameters.runType; } if(typeof event.queryStringParameters.tripID != \u0026amp;#39;undefined\u0026amp;#39;) { tripID = event.queryStringParameters.tripID; } } let input = { \u0026amp;#34;trip_id\u0026amp;#34;: tripID, \u0026amp;#34;depart_city\u0026amp;#34;: \u0026amp;#34;Detroit\u0026amp;#34;, \u0026amp;#34;depart_time\u0026amp;#34;: \u0026amp;#34;2021-07-07T06:00:00.000Z\u0026amp;#34;, \u0026amp;#34;arrive_city\u0026amp;#34;: \u0026amp;#34;Frankfurt\u0026amp;#34;, \u0026amp;#34;arrive_time\u0026amp;#34;: \u0026amp;#34;2021-07-09T08:00:00.000Z\u0026amp;#34;, \u0026amp;#34;rental\u0026amp;#34;: \u0026amp;#34;BMW\u0026amp;#34;, \u0026amp;#34;rental_from\u0026amp;#34;: \u0026amp;#34;2021-07-09T00:00:00.000Z\u0026amp;#34;, \u0026amp;#34;rental_to\u0026amp;#34;: \u0026amp;#34;2021-07-17T00:00:00.000Z\u0026amp;#34;, \u0026amp;#34;run_type\u0026amp;#34;: runType }; const params = { stateMachineArn: process.env.statemachine_arn, input: JSON.stringify(input) }; stepFunctions.startExecution(params, (err:any, data:any) =\u0026amp;gt; { if (err) { console.log(err); const response = { statusCode: 500, body: JSON.stringify({ message: \u0026amp;#39;There was an error processing your reservation\u0026amp;#39; }) }; callback(null, response); } else { console.log(data); const response = { statusCode: 200, body: JSON.stringify({ message: \u0026amp;#39;Your reservation is being processed\u0026amp;#39; }) }; callback(null, response); } }); }; ワークフロー解説   Successful Execution ─ https://{api gateway url} https://bu112wq7zb.execute-api.ap-northeast-1.amazonaws.com/prod   ステートマシン実行結果：成功\n ReserveFlightで、depart, arriveの情報からflightReservationIDを生成し、Flightsテーブルにtransaction_status=pendingでレコードを挿入する ReserveCarRentalで、from, toの情報からcarRentalReservationIDを生成し、CarRentalsテーブルにtransaction_status=pendingでレコードを挿入 …","date":1650585600,"description":"","lastmod":"2022-04-22T00:00:00Z","objectID":"6a9bf130165c8065d826183609595130","permalink":"https://y37u51k.github.io/aws-saga-tutorial/3_execution/","publishdate":"2022-04-22T00:00:00Z","title":"3.実行"},{"content":"AWS公式Sagaパターンチュートリアルを実施した際の技術メモ\n1_事前準備 必要ツールのインストール／設定\n2_環境構築 CDKで定義した環境の構築、及び、アプリのデプロイ\n3_実行 実行フローの起動\n","date":1650240000,"description":"Text about this post","lastmod":"2022-04-18T00:00:00Z","objectID":"08687896be388cd872891b81af1a7d11","permalink":"https://y37u51k.github.io/aws-saga-tutorial/","publishdate":"2022-04-18T00:00:00Z","title":"AWS公式Sagaパターンチュートリアル"},{"content":"1_事前準備 必要ツールのインストール／設定\n2_環境構築 CDKで定義した環境の構築、及び、アプリのデプロイ\n3_実行 実行フローの起動\n","date":1653350400,"description":"Text about this post","lastmod":"2022-05-24T00:00:00Z","objectID":"904369f2792a688428fddf913fbee19f","permalink":"https://y37u51k.github.io/saga-arch/","publishdate":"2022-05-24T00:00:00Z","title":"Sagaアーキテクチャ調査"},{"content":"Sagaコーディネーション Sagaの実装は各ステップをコーディネートするコードから作られており、下記2通りの手法が存在する\n1. Choreography (コレオグラフィ) ワークフロー全体を管理するコントローラーを立てず、各サービスが自立分散的に動作することで整合性を保つ方式\nSagaの参加サービスが相互に相手のイベントをサブスクライブし、それをトリガーに適切な処理を行う\nChoreography実装パターン例\n考慮点\n DB更新とイベントのパブリッシュがアトミックに実行されること Sagaの参加サービス間でデータを対応付けられるように設計する必要があること  メリット\n 一元的な制御モジュールが不要であるため、単一障害点がないこと 各サービスの動きが単純でシンプルであること  デメリット\n Saga全体を管理するコーディネーターが存在しないため、ワークフローの把握が難しく、実装が複雑・煩雑化する 新たなサービスを追加する際の影響範囲が大きい 他サービスは自分に影響するイベントをサブスクライブする必要があるため、相互が密結合になる  2. Orchestration (オーケストレーション) Sagaサービスに指示を与えるオーケストレーションを定義し、中央集権的に全体を管理する方式\nオーケストレーター(コントローラー)と参加サービスが通信を行い、サービスはそれをトリガーに指示された処理を行う\nOrchestration実装パターン例\n状態マシンを利用したモデリング方法\n 状態マシンを用いると、個々の状態及び状態遷移を管理、可視化することができ、ワークフローの制御やテスト実行も容易となる 状態遷移によって適切なアクションを定義することで、各サービスを適切に動作させることが可能 各サービスはローカルDBの更新とオーケストレーターへのメッセージ送信をアトミックに行う必要がある(=トランザクショナルメッセージング)  メリット\n 依存関係が一方向で単純であるため、ワークフローの把握や追跡がしやすい 状態マシン等を用いることで、ワークフローの全体の制御がしやすい 各サービスはオーケストレーター以外と通信を行わないため、コレオグラフィと比較して疎結合な構成を組みやすい  デメリット\n オーケストレーターという単一障害点が発生し、オーケストレーターに障害が発生するとワークフロー全体が機能しない サービスの修正に対して常にオーケストレーターの追加実装が必要となる  ","date":1653350400,"description":"","lastmod":"2022-05-24T00:00:00Z","objectID":"f430bcbffdfca400161a5817276f26db","permalink":"https://y37u51k.github.io/saga-arch/coordination/","publishdate":"2022-05-24T00:00:00Z","title":"1.Sagaコーディネーション"},{"content":"AWS Toolkit for IntelliJ (Gradle)でのアプリ開発 参考：\nhttps://dev.classmethod.jp/articles/aws-toolkit-for-jetbrains-with-java8-gradle/\nhttps://qiita.com/kalzit/items/5d64f93bf75aaaad9915\nAWSでのサーバレスアプリケーションの開発／デプロイを効率化するために下記2つを用いる\n AWS Toolkit for IntelliJ IDEA：AWS上でのJava及びPythonアプリの開発／デバッグ／デプロイを容易にするOSSプラグイン SAM (AWS Serverless Application Model)：サーバレスアーキテクチャを構築するためのOSSフレームワーク  SAM CLIのインストール 参考ページを元に、SAM CLIをインストールする\nAWS Toolkit for IntelliJ IDEAの導入 参考ページを元に、AWS Toolkitの導入、及び、認証情報／リージョンの設定を行う\nプロジェクトの作成 参考ページを元に、SAMテンプレートプロジェクトを作成する\n","date":1651449600,"description":"","lastmod":"2022-05-02T00:00:00Z","objectID":"93f3ef22eb790bf2e292abefe4c7d1b9","permalink":"https://y37u51k.github.io/tips/developmentsetup/","publishdate":"2022-05-02T00:00:00Z","title":"開発準備"},{"content":"\u0026amp;laquo;\u0026amp;laquo;\u0026amp;laquo;\u0026amp;lt; HEAD\nHugo And Github Page Hugoの導入とGithub Pageの作成\nDevelopment Setup 開発準備\n","date":1649808000,"description":"Text about this post","lastmod":"2022-04-13T00:00:00Z","objectID":"3cca17b3d02acf2ed46dae9c53c05e48","permalink":"https://y37u51k.github.io/tips/","publishdate":"2022-04-13T00:00:00Z","title":"Tips"},{"content":"Hugoの導入 インストール  リリースページから、Win64bitをzipダウンロード 下記の例を参考に任意の場所にHugoのbinフォルダを作成しzipを解凍、環境変数パスを通し、hugoコマンドが実行できることを確認する  C:\\Hugo\\bin テーマの適用  hugoフォルダ配下で下記のコマンドを実行し、作業フォルダを作成する   $ hugo new site \u0026amp;#34;hugo-document(任意の名称)\u0026amp;#34;  hugo-document ├─archetypes : contentファイル以下に作るファイルの雛形を定義する ├─content : Markdownで作成したコンテンツを入れる ├─data : サイト全体で共有する情報を定義する ├─layouts : サイトの構造を定義する ├─static : cssや画像を置く └─themes : テーマ資材を置く  作成したフォルダに移動して、テーマをインストールする   $ cd hugo-document/themes //テーマをインストール $ git clone https://github.com/thingsym/hugo-theme-techdoc.git 新規ページの作成  下記のコマンドを実行して新規ファイルを作成する   $ hugo new content/test.md(任意の名称)  Hugoのセクション機能を使って記事を階層構造にする場合、セクションのindexページを作成する   /content/_index.md (どのセクションにも属していないindex page) /content/tips/_index.md (tipsセクションのindex page) /content/tips/page1.md (single page) Github Pageの作成 config. tomlの修正  直下のconfig.tomlを、下記を参考に適宜修正する   baseurl = \u0026amp;#34;https://y37u51k.github.io/\u0026amp;#34; languageCode = \u0026amp;#34;ja-jp\u0026amp;#34; DefaultContentLanguage = \u0026amp;#34;ja\u0026amp;#34; title = \u0026amp;#39;Document\u0026amp;#39; theme = \u0026amp;#34;hugo-theme-techdoc\u0026amp;#34; hasCJKLanguage = true metaDataFormat = \u0026amp;#34;yaml\u0026amp;#34; defaultContentLanguage = \u0026amp;#34;en\u0026amp;#34; defaultContentLanguageInSubdir= false enableMissingTranslationPlaceholders = false #Github Pageで公開する際はpublic/ではなく、docs/配下にhtmlを設置すること publishdir = \u0026amp;#34;docs\u0026amp;#34; #github.io/配下にディレクトリ階層を持たせたい場合には、trueにすること canonifyurls = true ドラフト機能の切り替え  Hugoのドラフト機能を用いると、未完成の記事はデフォルトでhtmlファイルとして出力されない 下記の通りに各Markdownファイルのドラフト機能をオフにする、もしくは、html出力時に-Dオプションを指定すること  --- title: Tips date: 2022-04-13 lastmod: 2022-04-13 #falseにするとhtml出力が行われる draft: false weight: 9 description: Text about this post images: --- ## html出力コマンド\n$ hugo -D html出力  下記のコマンドを用いて、htmlファイルを/docs配下に出力する   #ドラフト記事は出力しない $ hugo #ドラフト記事も出力する $ hugo -D Github Pageの設定  /docsを含む全てのディレクトリをGitのremoteレポジトリにプッシュする Github上のSettingsタブから、Github Pagesのsourceをmaster/docsに設定する https://y37u51k.github.io/にアクセスするとページが閲覧可能となる  ","date":1649808000,"description":"","lastmod":"2022-04-13T00:00:00Z","objectID":"0b1248f594192c51c26e5a5b6a5a193d","permalink":"https://y37u51k.github.io/tips/hugoandgithubpage/","publishdate":"2022-04-13T00:00:00Z","title":"Hugoの導入とGithub Pageの作成"}]